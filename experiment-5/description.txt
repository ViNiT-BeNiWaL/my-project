DYNAMIC PRODUCT FILTER WITH DROPDOWN

FUNCTIONALITY & VALIDATIONS
1. FIELD: Category Dropdown
    -> Requirement: User must select a category to filter products.
    -> Options:
        `All Products` → Displays every product.
        `Electronics` → Displays only products tagged as electronics.
        `Clothing` → Displays only products tagged as clothing.
        `Books` → Displays only products tagged as books.
    -> VALID SELECTIONS:
        "All Products" → shows Laptop, T-shirt, Headphones, Jeans, Novel, Cookbook.
        "Electronics" → shows Laptop, Headphones.
        "Clothing" → shows T-shirt, Jeans.
        "Books" → shows Novel, Cookbook.
    ->INVALID CASES:
        None (since dropdown restricts input).

2. FIELD: Product List Display
    ->Requirement: Must dynamically update product listing based on selected category.
    ->Behaviour:
        ->If category matches product → product name displayed.
        ->If category doesn’t match any → no product is shown.


CSS STYLING BREAKDOWN
1. ELEMENT: body (Page Background)
    ->Purpose: Centers filter box and sets visual tone.
    ->Properties & Effects:
        `font-family: sans-serif;` → Clean readable text.
        `background-color: #f4f4f9;` → Light gray background.
        `display: flex; justify-content: center; align-items: center;` → Centers content both vertically and horizontally.
        `height: 100vh; margin: 0;` → Full height layout with no margin.

2. ELEMENT: .box (Main Filter Container)
    ->Purpose: Styles the central filter box.
    ->Properties & Effects:
        `width: 400px; padding: 30px;` → Fixed width with inner spacing.
        `background: #fff;` → White background for contrast.
        `box-shadow: 0 5px 15px rgba(0,0,0,0.1);` → Soft shadow for depth.
        `border-radius: 8px;` → Smooth rounded corners.

3. ELEMENT: select (Dropdown Menu)
    ->Purpose: Styles the category filter dropdown.
    ->Properties & Effects:
        `width: 100%; padding: 10px; margin-bottom: 20px;` → Full width with spacing.
        `font-size: 16px;` → Comfortable readable text.
        `border: 1px solid #ccc; border-radius: 4px;` → Subtle gray border, slightly rounded.

4. ELEMENT: .product (Product Items)
    ->Purpose: Styles each dynamically displayed product.
    ->Properties & Effects:**
        `padding: 12px;` → Space inside product block.
        `border: 1px solid #eee; border-radius: 4px;` → Light border with rounded corners.
        `margin-top: 8px;` → Separation between products.
        `background-color: #fafafa;` → Slightly shaded background.


JAVASCRIPT FUNCTIONALITY BREAKDOWN
1. VARIABLE: `products` (Data Array)
    ->Purpose: Stores product names with their categories.
    ->Structure: Array of objects → `{ name: 'laptop', category: 'electronics' }`.
    ->Effect: Acts as the database for filtering.

2. VARIABLE: `productlistContainer`
    ->Purpose: Points to the HTML container where products will be displayed.
    ->Code: `document.getElementById('product-list')`.

3. FUNCTION: `filterProducts()`
    ->Purpose: Filters products dynamically based on selected dropdown category.
    ->Steps:
        1. Get selected category → `document.getElementById('filter').value`.
        2. Initialize empty HTML string → `let htmlContent = ''`.
        3. Loop through all products using `.forEach()`.
        4. If `selectedCategory` matches product’s category OR is `"all"`, add product HTML.
        5. Update DOM → `productlistContainer.innerHTML = htmlContent;`.
    ->Effect: Instantly updates product list when user changes dropdown option.

4. INITIAL CALL: `filterProducts();`
    ->Purpose: Ensures that when the page loads, **all products** are displayed by default.

LEARNING OUTCOMES
    1. How to create a **dynamic product filter** using HTML, CSS, and JavaScript.
    2. How to use **dropdown menus with `onchange` events**.
    3. How to store and manage data using **JavaScript arrays of objects**.
    4. How to dynamically **update webpage content with DOM manipulation (`innerHTML`)**.
    5. How to combine **HTML structure, CSS design, and JavaScript interactivity** for a complete project.
